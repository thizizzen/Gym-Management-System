/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gym;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author iamno
 */
public class Renewal extends javax.swing.JFrame {

    /**
     * Creates new form Status
     */
    public Renewal() {
        initComponents();
        connectToDatabase();
        loadTableData();
        
    }
    
    Connection con;
    PreparedStatement pst;
    DefaultTableModel df;
    
    
    private void connectToDatabase() {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/gymregistration", "root", "");
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Renewal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
   private void loadTableData() {
    try {
        pst = con.prepareStatement("SELECT fname, subs, date, discount,"
            + "CASE "
            + "    WHEN subs = 'Weekly' THEN "
            + "        CASE WHEN DATEDIFF(date, CURDATE()) + 7 <= 0 THEN 'Expired' ELSE DATEDIFF(date, CURDATE()) + 7 END "
            + "    WHEN subs = 'Monthly' THEN "
            + "        CASE WHEN DATEDIFF(date, CURDATE()) + 31 <= 0 THEN 'Expired' ELSE DATEDIFF(date, CURDATE()) + 31 END "
            + "    WHEN subs = 'Yearly' THEN "
            + "        CASE WHEN DATEDIFF(date, CURDATE()) + 356 <= 0 THEN 'Expired' ELSE DATEDIFF(date, CURDATE()) + 356 END "
            + "    ELSE 'Expired' "
            + "END AS days_left, "
            + "CASE "
            + "    WHEN subs = 'Weekly' THEN "
            + "        CASE WHEN discount = 'Yes' THEN 240 ELSE 300 END "
            + "    WHEN subs = 'Monthly' THEN "
            + "        CASE WHEN discount = 'Yes' THEN 640 ELSE 800 END "
            + "    WHEN subs = 'Yearly' THEN "
            + "        CASE WHEN discount = 'Yes' THEN 4800 ELSE 6000 END "
            + "    ELSE 0 "
            + "END AS amount "
            + "FROM member");


        ResultSet rs = pst.executeQuery();

        ResultSetMetaData rd = rs.getMetaData();
        int c;
        c = rd.getColumnCount();
        df = (DefaultTableModel) jTable1.getModel();
        df.setRowCount(0);
        while (rs.next()) {
            Vector v2 = new Vector();

            for (int i = 1; i <= c; i++) {
                v2.add(rs.getString("fname"));
                v2.add(rs.getString("subs"));
                v2.add(rs.getString("date"));
                String daysLeft = rs.getString("days_left");
                v2.add(daysLeft.equals("Expired") ? "Expired" : String.valueOf(daysLeft));
                String discount = rs.getString("discount");
                String amount = calculateAmount(rs.getString("subs"), daysLeft, discount);
                v2.add(amount);

            }

            df.addRow(v2);
        }
        
        

    } catch (SQLException ex) {
        Logger.getLogger(Renewal.class.getName()).log(Level.SEVERE, null, ex);
    }
}

  private String calculateAmount(String subscription, String daysLeft, String discount) {
    double amount = 0;

    if (daysLeft.equals("Expired")) {
        // Subscription is expired, set the amount to 0
        amount = 0;
    } else {
        switch (subscription) {
            case "Weekly":
                amount = discount.equals("Yes") ? 240 : 300;
                break;
            case "Monthly":
                amount = discount.equals("Yes") ? 640 : 800;
                break;
            case "Yearly":
                amount = discount.equals("Yes") ? 4800 : 6000;
                break;
        }
    }

    return String.format("₱%,.0f", amount);
}  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51, 80));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setForeground(new java.awt.Color(255, 255, 255));

        jButton1.setBackground(new java.awt.Color(51, 51, 51));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setBackground(new java.awt.Color(51, 51, 51));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Subscription", "Date", "Days Left", "Amount"
            }
        ));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Renew");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(210, 110, 650, 469);

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\user\\OneDrive\\Documents\\image\\Untitled.png")); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(880, 10, 180, 140);

        jLabel1.setIcon(new javax.swing.ImageIcon("C:\\Users\\user\\OneDrive\\Documents\\image\\—Pngtree—black and white gym room_3485114.jpg")); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 0, 1070, 600);

        setSize(new java.awt.Dimension(1087, 639));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        int selectedRow = jTable1.getSelectedRow();

    if (selectedRow == -1) {
        // No row selected, show a message or handle accordingly
        JOptionPane.showMessageDialog(this, "Please select a member to renew or change subscription.");
        return;
    }

    // Get data from the selected row
    String memberName = jTable1.getValueAt(selectedRow, 0).toString();

    // Create options for subscription change
    Object[] options = {"Renew", "Change Subscription", "Cancel"};
    int choice = JOptionPane.showOptionDialog(this,
            "Renew or change subscription for " + memberName + "?",
            "Renewal and Subscription Change",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,
            options,
            options[2]);

    switch (choice) {
        case JOptionPane.YES_OPTION:
            // User chose to renew
            handleRenewal(memberName);
            break;

        case JOptionPane.NO_OPTION:
            // User chose to change subscription
            handleChangeSubscription(memberName);
            break;

        case JOptionPane.CANCEL_OPTION:
            // User chose to cancel
            break;
    }
}
    
private void handleRenewal(String memberName) {
    try {
        int memberId = getMemberId(memberName);

        // Check if the current subscription is already expired
        int daysLeft = getDaysLeftForMember(memberName);
        if (daysLeft > 0) {
            JOptionPane.showMessageDialog(this, "Subscription for " + memberName + " is not expired yet. Cannot renew until it's expired.");
            return;
        }

        // Implement your update logic here using the memberId
        String updateQuery = "UPDATE member SET date = CURDATE() WHERE id = ?";
        try (PreparedStatement updateStatement = con.prepareStatement(updateQuery)) {
            updateStatement.setInt(1, memberId);
            updateStatement.executeUpdate();
        }

        // Show a message indicating successful renewal
        JOptionPane.showMessageDialog(this, "Subscription renewed for " + memberName);

        // After renewing, refresh the table
        loadTableData();
    } catch (SQLException ex) {
        Logger.getLogger(Renewal.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private void handleChangeSubscription(String memberName) {
    try {
        int memberId = getMemberId(memberName);
        String currentSubscription = getCurrentSubscription(memberName);

        String[] subscriptionOptions = {"Weekly", "Monthly", "Yearly"};
        String newSubscription = (String) JOptionPane.showInputDialog(
                this,
                "Choose a new subscription plan for " + memberName + ":",
                "Subscription Change",
                JOptionPane.QUESTION_MESSAGE,
                null,
                subscriptionOptions,
                subscriptionOptions[0]);

        if (newSubscription != null) {
            if (newSubscription.equals(currentSubscription)) {
                JOptionPane.showMessageDialog(this, "Cannot change to the same subscription.");
                return;
            }

            int daysLeft = getDaysLeftForMember(memberName);
            if (daysLeft > 0) {
                JOptionPane.showMessageDialog(this, "Subscription for " + memberName + " is not expired yet. Cannot change subscription until it's expired.");
                return;
            }

            // Update subscription and date in the member table
            String updateQuery = "UPDATE member SET subs = ?, date = CURDATE() WHERE id = ?";
            try (PreparedStatement updateStatement = con.prepareStatement(updateQuery)) {
                updateStatement.setString(1, newSubscription);
                updateStatement.setInt(2, memberId);
                updateStatement.executeUpdate();
            }

            // Show a message indicating successful subscription change
            JOptionPane.showMessageDialog(this, "Subscription changed to " + newSubscription + " for " + memberName);

            // After changing subscription, refresh the table
           loadTableData();
        }
    } catch (SQLException ex) {
        Logger.getLogger(Renewal.class.getName()).log(Level.SEVERE, null, ex);
    }
}

private String getCurrentSubscription(String memberName) throws SQLException {
    String currentSubscription = "";

    String query = "SELECT subs FROM member WHERE fname = ?";
    try (PreparedStatement statement = con.prepareStatement(query)) {
        statement.setString(1, memberName);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            currentSubscription = resultSet.getString("subs");
        }
    }

    return currentSubscription;
}


private int getDaysLeftForMember(String memberName) throws SQLException {
    int daysLeft = 0;

    // Use a PreparedStatement to avoid SQL injection
    String query = "SELECT "
            + "CASE "
            + "    WHEN subs = 'Weekly' THEN DATEDIFF(date, CURDATE()) + 7 "
            + "    WHEN subs = 'Monthly' THEN DATEDIFF(date, CURDATE()) + 31 "
            + "    WHEN subs = 'Yearly' THEN DATEDIFF(date, CURDATE()) + 356 "
            + "    ELSE 0 "
            + "END AS days_left "
            + "FROM member "
            + "WHERE fname = ?";
    
    try (PreparedStatement statement = con.prepareStatement(query)) {
        statement.setString(1, memberName);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            daysLeft = resultSet.getInt("days_left");
        }
    }

    return daysLeft;
}


private int getMemberId(String memberName) throws SQLException {
    int memberId = -1;

    String query = "SELECT id FROM member WHERE fname = ?";
    try (PreparedStatement statement = con.prepareStatement(query)) {
        statement.setString(1, memberName);
        ResultSet resultSet = statement.executeQuery();
        if (resultSet.next()) {
            memberId = resultSet.getInt("id");
        }
    }

    return memberId;
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();

        Main mainForm = new Main();
        mainForm.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Renewal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Renewal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Renewal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Renewal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Renewal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
