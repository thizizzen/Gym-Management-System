/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gym;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author iamno
 */

class BaseTrainerForm extends javax.swing.JFrame {
    Connection con;
    PreparedStatement pst;
    DefaultTableModel df;
    
}
    
public class Trainer extends BaseTrainerForm {

    /**
     * Creates new form Trainer
     */
    public Trainer() {
        initComponents();
        Connect();
        table_load();
        java.util.Date currentDate = new java.util.Date();
        txtdoj.setDate(currentDate);
        addDocumentListenerForValidation(txttrainer, txtnameinvalid);
        addDocumentListenerForValidation(txtage, txtageinvalid);
        addDocumentListenerForValidation(txtmobile, txtmobileinvalid);
    }
    
    public void Connect()
    {
        try {
            Class.forName("com.mysql.cj.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/gymregistration", "root", "");
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Trainer.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }
    
    public void table_load()
    {
            try {
                pst = con.prepareStatement("select * from trainer");
                ResultSet rs = pst.executeQuery();
            
            ResultSetMetaData rd = rs.getMetaData();
            int c;
            c = rd.getColumnCount();
            df = (DefaultTableModel)jTable1.getModel();
            df.setRowCount(0);
            while(rs.next())
            {
                Vector v2 = new Vector();
                
                for(int i=1; i<=c; i++)
                {
                    v2.add(rs.getString("id"));
                    v2.add(rs.getString("name"));
                    v2.add(rs.getString("age"));
                    v2.add(rs.getString("address"));
                    v2.add(rs.getString("mobile"));
                    v2.add(rs.getString("doj"));
                }
                
                df.addRow(v2);
            }
            
            } catch (SQLException ex) {
                Logger.getLogger(Trainer.class.getName()).log(Level.SEVERE, null, ex);
            }
            
        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txttrainer = new javax.swing.JTextField();
        txtage = new javax.swing.JTextField();
        txtaddress = new javax.swing.JTextField();
        txtmobile = new javax.swing.JTextField();
        txtdoj = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        txtnameinvalid = new javax.swing.JLabel();
        txtageinvalid = new javax.swing.JLabel();
        txtmobileinvalid = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Name:");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Age:");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Address:");

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Mobile:");

        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Date of Join:");

        txttrainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txttrainerActionPerformed(evt);
            }
        });

        txtage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtageActionPerformed(evt);
            }
        });

        txtmobile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtmobileActionPerformed(evt);
            }
        });

        txtdoj.setBackground(new java.awt.Color(51, 51, 51));
        txtdoj.setEnabled(false);

        jButton1.setBackground(new java.awt.Color(51, 51, 51));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Add");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(51, 51, 51));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(51, 51, 51));
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Edit");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(51, 51, 51));
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Delete");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(51, 51, 51));
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Reset");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        txtnameinvalid.setBackground(new java.awt.Color(51, 51, 51));
        txtnameinvalid.setForeground(java.awt.Color.red);

        txtageinvalid.setBackground(new java.awt.Color(51, 51, 51));
        txtageinvalid.setForeground(java.awt.Color.red);

        txtmobileinvalid.setBackground(new java.awt.Color(51, 51, 51));
        txtmobileinvalid.setForeground(java.awt.Color.red);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(18, 18, 18)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addGap(59, 59, 59)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtmobile)
                            .addComponent(txtaddress)
                            .addComponent(txtage)
                            .addComponent(txttrainer)
                            .addComponent(txtdoj, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtnameinvalid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtageinvalid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtmobileinvalid, javax.swing.GroupLayout.DEFAULT_SIZE, 69, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtnameinvalid, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txttrainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtageinvalid, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtaddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtmobile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtmobileinvalid, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(txtdoj, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(125, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2);
        jPanel2.setBounds(60, 120, 441, 427);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51,80));
        jPanel1.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jTable1.setBackground(new java.awt.Color(51, 51, 51));
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Age", "Address", "Mobile", "Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(500, 120, 540, 426);

        jLabel9.setIcon(new javax.swing.ImageIcon("C:\\Users\\user\\OneDrive\\Documents\\image\\Untitled.png")); // NOI18N
        getContentPane().add(jLabel9);
        jLabel9.setBounds(860, 30, 190, 80);

        jLabel8.setIcon(new javax.swing.ImageIcon("C:\\Users\\user\\OneDrive\\Documents\\image\\—Pngtree—black and white gym room_3485114.jpg")); // NOI18N
        getContentPane().add(jLabel8);
        jLabel8.setBounds(0, 0, 1070, 600);

        setSize(new java.awt.Dimension(1087, 639));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void addDocumentListenerForValidation(javax.swing.JTextField textField, javax.swing.JLabel validationLabel) {
        textField.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                validateField(textField, validationLabel);
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                validateField(textField, validationLabel);
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                validateField(textField, validationLabel);
            }
        });
    }

    private boolean isValidName(String name) {
    // Check if the name consists of words where each word starts with a capital letter
    return name.isEmpty() || name.matches("([A-Z][a-z]*\\s*)+");
}


private boolean isValidAge(String age) {
    // Check if the age contains only digits and is limited to a maximum of 3 digits
     return age.isEmpty() || age.matches("\\d{1,3}");
}

private boolean isValidMobile(String mobile) {
    // Check if the mobile number contains exactly 11 digits
    return mobile.isEmpty() || (mobile.matches("[0-9]+") && mobile.length() == 11);
}



private void validateField(javax.swing.JTextField textField, javax.swing.JLabel validationLabel) {
    String text = textField.getText().trim();

    // Validate the field content here
    if (textField.equals(txttrainer)) {
        if (isValidName(text)) {
            validationLabel.setText(""); // Clear validation message if valid
        } else {
            validationLabel.setText("Invalid"); // Display validation message if invalid
        }
    } else if (textField.equals(txtage)) {
        if (isValidAge(text)) {
            validationLabel.setText(""); // Clear validation message if valid
        } else {
            validationLabel.setText("Invalid"); // Display validation message if invalid
        }
    } else if (textField.equals(txtmobile)) {
        if (isValidMobile(text)) {
            validationLabel.setText(""); // Clear validation message if valid
        } else {
            validationLabel.setText("Invalid"); // Display validation message if invalid
        }
    }
}

    private void resetFields() {
        // Check if fields are already empty
        if (txttrainer.getText().isEmpty() &&
                txtage.getText().isEmpty() &&
                txtaddress.getText().isEmpty() &&
                txtmobile.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Fields are already empty.", "Empty Fields", JOptionPane.INFORMATION_MESSAGE);
            return; // Stop execution if fields are already empty
        }

        // Reset the fields
        txttrainer.setText("");
        txtage.setText("");
        txtaddress.setText("");
        txtmobile.setText("");
        setCurrentDate();
        txtnameinvalid.setText("");
        txtageinvalid.setText("");
        txtmobileinvalid.setText("");
        jButton1.setEnabled(true);

        // Set focus to a specific component (e.g., the JFrame itself)
        this.requestFocusInWindow();

        // Revalidate the container
        this.revalidate();
    }

    
    private void txtageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtageActionPerformed
        // TODO add your handling code here:
        if (!containsOnlyNumbers(txtage.getText())) {
        txtageinvalid.setText("Invalid"); // Set error message
        txtage.setText(""); // Clear the text field
    } else {
        txtageinvalid.setText(""); // Clear error message if the input is valid
    
}
    }//GEN-LAST:event_txtageActionPerformed

    private void setCurrentDate() {
    java.util.Date currentDate = new java.util.Date();
    txtdoj.setDate(currentDate);
}

    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

       // TODO add your handling code here:
    String tname = txttrainer.getText();
    String age = txtage.getText();
    String address = txtaddress.getText();
    String mobile = txtmobile.getText();
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    String date = df.format(txtdoj.getDate());

    // Validation for Empty Fields
    if (tname.isEmpty() || age.isEmpty() || address.isEmpty() || mobile.isEmpty() || date.isEmpty()) {
        JOptionPane.showMessageDialog(this, "The fields are incomplete, please fill in all fields.", "Incomplete Fields", JOptionPane.ERROR_MESSAGE);
        return; // Stop execution if any field is empty
    }

    try {   
        pst = con.prepareStatement("INSERT INTO trainer (name, age, address, mobile, doj) VALUES (?, ?, ?, ?, ?)");
        pst.setString(1, tname);
        pst.setString(2, age);
        pst.setString(3, address);
        pst.setString(4, mobile);
        pst.setString(5, date); 
        pst.executeUpdate();
        JOptionPane.showMessageDialog(this, "Trainer has been Added!");

        resetFields();
        table_load();

    } catch (SQLException ex) {
        Logger.getLogger(Trainer.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        {
        this.dispose();

    Main mainForm = new Main();
    mainForm.setVisible(true);
    }       
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txttrainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txttrainerActionPerformed
        // TODO add your handling code here:
          if (!containsOnlyLetters(txttrainer.getText())) {
        txtnameinvalid.setText("Invalid"); // Set error message
        txttrainer.setText(""); // Clear the text field
    } else {
        txtnameinvalid.setText(""); // Clear error message if the input is valid
    
}
}
private boolean containsOnlyNumbers(String text) {
    return text.matches("[0-9]+");
}
    
private boolean containsOnlyLetters(String text) {
    return text.matches("[a-zA-Z]+");
    }//GEN-LAST:event_txttrainerActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
        try {
            df =(DefaultTableModel)jTable1.getModel();
            int selected = jTable1.getSelectedRow();
            
            int id = Integer.parseInt(df.getValueAt(selected, 0).toString());
            
            txttrainer.setText(df.getValueAt(selected, 1).toString());
            txtage.setText(df.getValueAt(selected, 2).toString());
            txtaddress.setText(df.getValueAt(selected, 3).toString());
            txtmobile.setText(df.getValueAt(selected, 4).toString());
            Date date = new SimpleDateFormat("yyyy-MM-dd").parse((String)df.getValueAt(selected, 5));
            txtdoj.setDate(date);
            
            jButton1.setEnabled(false);
       
        } catch (ParseException ex) {
            Logger.getLogger(Trainer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    df = (DefaultTableModel) jTable1.getModel();
    int selected = jTable1.getSelectedRow();

    // Check if a row is selected
    if (selected == -1) {
        JOptionPane.showMessageDialog(this, "Please select a trainer to edit.", "Selection Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    int id = Integer.parseInt(df.getValueAt(selected, 0).toString());

    String existingTname = df.getValueAt(selected, 1).toString();
    String existingAge = df.getValueAt(selected, 2).toString();
    String existingAddress = df.getValueAt(selected, 3).toString();
    String existingMobile = df.getValueAt(selected, 4).toString();
    String existingDate = df.getValueAt(selected, 5).toString(); // Assuming date is stored as a string in the table

    String tname = txttrainer.getText();
    String age = txtage.getText();
    String address = txtaddress.getText();
    String mobile = txtmobile.getText();
    SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd");
    String date = df.format(txtdoj.getDate());

    // Check if any changes were made
    if (tname.equals(existingTname) && age.equals(existingAge) && address.equals(existingAddress) &&
        mobile.equals(existingMobile) && date.equals(existingDate)) {
        JOptionPane.showMessageDialog(this, "No changes made.", "No Changes", JOptionPane.INFORMATION_MESSAGE);
        return;
    }

    try {   
        pst = con.prepareStatement("UPDATE trainer SET name = ?, age = ?, address = ?, mobile = ?, doj = ? WHERE id = ?");
        pst.setString(1, tname);
        pst.setString(2, age);
        pst.setString(3, address); 
        pst.setString(4, mobile);
        pst.setString(5, date); 
        pst.setInt(6, id);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(this, "Trainer has been Updated!");

        resetFields();
        table_load();

        jButton1.setEnabled(true);

    } catch (SQLException ex) {
        Logger.getLogger(Trainer.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    df = (DefaultTableModel) jTable1.getModel();
    int selected = jTable1.getSelectedRow();

    // Check if a row is selected
    if (selected == -1) {
        JOptionPane.showMessageDialog(this, "Please select a trainer to delete.", "Selection Error", JOptionPane.WARNING_MESSAGE);
        return;
    }

    int id = Integer.parseInt(df.getValueAt(selected, 0).toString());

    try {   
        pst = con.prepareStatement("DELETE FROM trainer WHERE id = ?");
        pst.setInt(1, id);
        pst.executeUpdate();
        JOptionPane.showMessageDialog(this, "Trainer has been Deleted");

        resetFields();
        table_load();

        jButton1.setEnabled(true);

    } catch (SQLException ex) {
        Logger.getLogger(Trainer.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
      resetFields();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void txtmobileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtmobileActionPerformed
        // TODO add your handling code here:
        if (!containsOnlyNumbers(txtmobile.getText())) {
        txtmobileinvalid.setText("Invalid"); // Set error message
        txtmobile.setText(""); // Clear the text field
    } else {
        txtmobileinvalid.setText(""); // Clear error message if the input is valid
    
}
    }//GEN-LAST:event_txtmobileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Trainer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Trainer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Trainer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Trainer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Trainer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField txtaddress;
    private javax.swing.JTextField txtage;
    private javax.swing.JLabel txtageinvalid;
    private com.toedter.calendar.JDateChooser txtdoj;
    private javax.swing.JTextField txtmobile;
    private javax.swing.JLabel txtmobileinvalid;
    private javax.swing.JLabel txtnameinvalid;
    private javax.swing.JTextField txttrainer;
    // End of variables declaration//GEN-END:variables
}
